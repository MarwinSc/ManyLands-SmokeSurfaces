#version 430
layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in; // work group size

layout(std430, binding = 0) buffer Pos1 { vec4 Position_In[]; };
layout(std430, binding = 1) buffer Indices { uint Indices_In[]; };
layout(std430, binding = 2) buffer Adjacency { int Adjacency_In[]; };
layout(std430, binding = 3) buffer Adjacency_Offset { ivec2 Adjacency_Offset_In[]; };
layout(std430, binding = 4) buffer Normals { vec4 Normals_Out[]; };
layout (binding = 5, offset = 0) uniform atomic_uint Count; 

vec3 calculate_normal(vec3 v1, vec3 v2, vec3 v3);

void main() {

    uint nr = atomicCounterIncrement(Count);
    vec4 aPos = Position_In[nr];
    int offset = Adjacency_Offset_In[nr][0];
    int nr_of_neighbours = Adjacency_Offset_In[nr][1];

    //calculate vertex normals
    vec3 avg_normal = vec3(0.0,0.0,0.0);

    for (int i = 0; i<nr_of_neighbours; i++){
        
       int adjacent_triangle_idx = Adjacency_In[offset + i];

       uint vertex_idx1 = Indices_In[adjacent_triangle_idx * 3];
       uint vertex_idx2 = Indices_In[adjacent_triangle_idx * 3 + 1];
       uint vertex_idx3 = Indices_In[adjacent_triangle_idx * 3 + 2];

       vec3 v1 = vec3(Position_In[vertex_idx1]);
       vec3 v2 = vec3(Position_In[vertex_idx2]);
       vec3 v3 = vec3(Position_In[vertex_idx3]);

        avg_normal += calculate_normal(v1,v2,v3);

        while (avg_normal.x < -1e+8)
        {
            avg_normal.x = 0.0;
        }
        while (avg_normal.y < -1e+8)
        {
            avg_normal.y = 0.0;
        }
        while (avg_normal.z < -1e+8)
        {
            avg_normal.z = 0.0;
        }
    }

    avg_normal /= nr_of_neighbours;
    avg_normal = normalize(avg_normal);

    //if(isnan(avg_normal.x) || isnan(avg_normal.y) || isnan(avg_normal.z)){
    //    avg_normal = vec3(0.33,0.33,0.33);
    //}
    //Normals_Out[nr] = avg_normal;
    Normals_Out[nr] = vec4(avg_normal,0.0);

}

vec3 calculate_normal(vec3 v1, vec3 v2, vec3 v3){
    vec3 e1 = v1 - v2;
    vec3 e2 = v3 - v2;
    return cross(e1,e2);
}